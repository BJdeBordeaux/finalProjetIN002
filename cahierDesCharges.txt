public class Club
    attribut
        private Manager magager
        private Coach coach
        private ArrayList<Joueur> joueur
        private ArrayList<Remplacant> remplacant
        private Match match
        private static int annee =0
        private double plafondSalaire // en million
    méthode
       boolean budget throws DepassementPlafonSalaireException
            avant la promotion, verifie si  le salaire total est plus grand que le plafondSalaire
                Si oui, throw new DepassementBudgetException
                sinon, continue
            catch : on prend Joueur moins compétent
        public void promotion 
            trouve un joueur dans le remplacant en le nommant joueur principal
            on peut créer des liste temporaire
        public void recrutement()
            recurter les remplacants
        public void mettreAJouer
            renouveller de contrat
            try
                budget
            catch
                promotion
                recrutement
        public void participerAuMatch
            comparer les données du match et la somme de capacite de joueur principaux
            si ce nombre du matche est plus petit, on gagner; sinon on perd
        public String toString
public class Match (singleton, sans trop se prolonger sur ça)
    https://fr.wikipedia.org/wiki/Singleton_(patron_de_conception)#Java
    attribut
        private static Match  match
        private double prime // en milion, l'argent que le club peut gagner si la 
        private int capaciteNotre;
        private int captaciteAdversaire;
        private static int nombreVictoires = 0;
        private static int nombreDefaites = 0;
    méthode
        private Match (int capaciteNotre)
        public final static Match getMatch()
        public void finirMatch()
        other getters and setters
            e.g. public double getPrime() return prime
            e.g. public double setPrime(double prime) this.prime = prime
    genere une equipe avec des valeurs aleatoire : Math.random() * intervale + min

victoire en fonction de capacite (voir si en fonction d'attaque et defense)
si victoire $(10000) de benefice pour le club, victory number +1

si defaite, defeat number +1

a la fin d'une annee(80 match) , 
si victory number > defeat number, capacite +=1+ (int) (victory number - defeat number)/coefv(10)

si victory number < defeat number, capacite +=1+ (int) abs(victory number - defeat number)/coefd(20)


public abstract class Personne
    attribut
        protected String nom // tirer au hazard par Outil.lettreAleatoire() 3 fois
        protected salaire //en million
        public static salaireDefaut
    méthode
        protected Personne(double salaire) //Constructeur
        protected Personne() //Constructeur par défaut
    méthode abstraite
        public void sePresenter
    héritage
        public class Manager extends Personne // qui ne rien fait, juste pour satisfaire la demande
            attribut
                public static final salaireDefaut // plus grand que salaire defaut d'une Personne
            méthode
                @override sePresenter
        public class Coach extends Personne implements  Evaluable
            attribut
                public static final double augmenterAttaqueDefaut, augmenterDefenseDefaut, capaciteDeclinDefaut // des valeurs par défaut
                private double capaciteDeclin
            methode
                public Coach(double augmenterAttaque, double augmenterDefense, double capaciteDeclin) // Constructeur
                public Coach() //constructeur par défaut
                public void declin
                @override public void decliner
                getters and setters
        public class Joueur implements Evaluable
            attribut
                protected double capacite
                protected int age
                protected int contrat

                public final static int CSC (coefficient salaire capacite)
                
            méthode
                public Joueur(double capacite, int age, int contrat)
                 // constructeur
                public Joueur(Joueur j) // construction par copie
                public Joueur() // constructeur par défaut utilisant des donnée aleatoire
                @override public void decliner
                    age++ et capacite--
                public void augmenterCapacite
                    grace au coach
                    abs(nbVictoire - nbDefaite)/COEFFVICTOIRE(ou COEFFDEFAITE)                   
                public void renouvellerContrat
                    contrat -= 1
                    if Joueur.contrat == 0 
                      renouveller salaire
                      salaire = capcite * coeff
            héritage
                public class Remplacant extends Joueur
                    attribut
                        public final static int CSCR (coefficient salaire capacite de remplacant)
                            salaire  = capacite * CSCR
                    méthode
                        Remplacant(double capacite, int age, int contrat) // constructeur
                        constructeur par défaut et par copie
                        @override sePresenter
                        @override seDecliner
public class Outil // Que des méthodes statiques
    attribut
    méthode statique
        public double aleatoireDoubleEntre(double min, double max)
        public int aleatoireIntEntre(int min, int max)
        public String aleatoireLettre()
        public boolean avoirLieuSeuil(double seuil) // tire un nombre aleatoire entre 0 et 1, si plus grand que seuil, return true
public interface Declinable
    méthode
        public void decliner
            lors de vieillissement, les capacites d'un joueur ou d'un coach declinent , ce qui lui rend moins capable et à la fin il doit être remplacé par un nouveau
public classe DepassementPlafonSalaireException extends Exception
